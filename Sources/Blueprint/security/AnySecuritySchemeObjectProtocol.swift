
/// Defines a security scheme that can be used by the operations.
/// 
/// Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2â€™s common flows (implicit, password, client credentials and authorization code) as defined in [[RFC6749](https://spec.openapis.org/oas/v3.1.0#bib-rfc6749)], and [OpenID Connect Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06).
/// Please note that as of 2020, the implicit flow is about to be deprecated by [OAuth 2.0 Security Best Current Practice](https://tools.ietf.org/html/draft-ietf-oauth-security-topics).
/// Recommended for most use case is Authorization Code Grant flow with PKCE.
/// 
/// This object _MAY_ be extended with [Specification Extensions](https://spec.openapis.org/oas/v3.1.0#specification-extensions).
/// 
/// https://spec.openapis.org/oas/v3.1.0#security-scheme-object
public protocol AnySecuritySchemeObjectProtocol: Sendable, ~Copyable {
    /// The type of the security scheme.
    /// Valid values are `apiKey`, `http`, `mutualTLS`, `oauth2`, `openIdConnect`.
    var type: String { get }

    /// A description for security scheme.
    /// [[CommonMark](https://spec.openapis.org/oas/v3.1.0#bib-commonmark)] syntax _MAY_ be used for rich text representation.
    var description: String? { get }

    /// The name of the header, query or cookie parameter to be used.
    var name: String { get }

    /// The location of the API key.
    /// Valid values are `query`, `header` or `cookie`.
    var `in`: String { get }

    /// The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [[RFC7235](https://spec.openapis.org/oas/v3.1.0#bib-rfc7235)] [Section 5.1](https://datatracker.ietf.org/doc/html/rfc7235#section-5.1).
    /// The values used _SHOULD_ be registered in the [IANA Authentication Scheme registry](https://spec.openapis.org/oas/v3.1.0#bib-iana-http-authschemes).
    var scheme: String { get }

    /// A hint to the client to identify how the bearer token is formatted.
    /// Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
    var bearerFormat: String? { get }

    /// OpenId Connect URL to discover OAuth2 configuration values.
    /// This _MUST_ be in the form of a URL.
    /// The OpenID Connect standard requires the use of TLS.
    var openIdConnectUrl: String { get }
}